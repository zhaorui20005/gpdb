--
-- Tests for password verifiers
--
-- Tests for GUC password_encryption
SET password_hash_algorithm = 'novalue'; -- error
ERROR:  invalid value for parameter "password_hash_algorithm": "novalue"
HINT:  Available values: MD5, SHA-256, SCRAM-SHA-256.
SET password_encryption = on; -- ok
SET password_hash_algorithm = 'md5'; -- ok
SET password_encryption = off; -- ok
SET password_hash_algorithm = 'scram-sha-256'; -- ok
-- consistency of password entries
SET password_encryption = off;
CREATE ROLE regress_passwd1 PASSWORD 'role_pwd1';
SET password_encryption = 'on';
SET password_hash_algorithm = 'md5';
CREATE ROLE regress_passwd2 PASSWORD 'role_pwd2';
SET password_encryption = 'on';
CREATE ROLE regress_passwd3 PASSWORD 'role_pwd3';
SET password_hash_algorithm = 'scram-sha-256';
CREATE ROLE regress_passwd4 PASSWORD 'role_pwd4';
SET password_encryption = 'off';
CREATE ROLE regress_passwd5 PASSWORD NULL;
-- check list of created entries
--
-- The scram verifier will look something like:
-- SCRAM-SHA-256$4096:E4HxLGtnRzsYwg==$6YtlR4t69SguDiwFvbVgVZtuz6gpJQQqUMZ7IQJK5yI=:ps75jrHeYU4lXCcXI4O8oIdJ3eO8o2jirjruw9phBTo=
--
-- Since the salt is random, the exact value stored will be different on every test
-- run. Use a regular expression to mask the changing parts.
SELECT rolname, regexp_replace(rolpassword, '(SCRAM-SHA-256)\$(\d+):([a-zA-Z0-9+/=]+)\$([a-zA-Z0-9+=/]+):([a-zA-Z0-9+/=]+)', '\1$\2:<salt>$<storedkey>:<serverkey>') as rolpassword_masked
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd%'
    ORDER BY rolname, rolpassword;
     rolname     |                rolpassword_masked
-----------------+---------------------------------------------------
 regress_passwd1 | role_pwd1
 regress_passwd2 | md54044304ba511dd062133eb5b4b84a2a3
 regress_passwd3 | md50e5699b6911d87f17a08b8d76a21e8b8
 regress_passwd4 | SCRAM-SHA-256$4096:<salt>$<storedkey>:<serverkey>
 regress_passwd5 |
(5 rows)

-- Rename a role
ALTER ROLE regress_passwd3 RENAME TO regress_passwd3_new;
NOTICE:  MD5 password cleared because of role rename
-- md5 entry should have been removed
SELECT rolname, rolpassword
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd3_new'
    ORDER BY rolname, rolpassword;
       rolname       | rolpassword
---------------------+-------------
 regress_passwd3_new |
(1 row)

ALTER ROLE regress_passwd3_new RENAME TO regress_passwd3;
-- ENCRYPTED and UNENCRYPTED passwords
ALTER ROLE regress_passwd1 UNENCRYPTED PASSWORD 'foo'; -- unencrypted
ALTER ROLE regress_passwd2 UNENCRYPTED PASSWORD 'md5dfa155cadd5f4ad57860162f3fab9cdb'; -- encrypted with MD5
SET password_hash_algorithm = 'md5';
ALTER ROLE regress_passwd3 ENCRYPTED PASSWORD 'foo'; -- encrypted with MD5
ALTER ROLE regress_passwd4 ENCRYPTED PASSWORD 'SCRAM-SHA-256$4096:VLK4RMaQLCvNtQ==$6YtlR4t69SguDiwFvbVgVZtuz6gpJQQqUMZ7IQJK5yI=:ps75jrHeYU4lXCcXI4O8oIdJ3eO8o2jirjruw9phBTo='; -- client-supplied SCRAM verifier, use as it is
SET password_hash_algorithm = 'scram-sha-256';
ALTER ROLE  regress_passwd5 ENCRYPTED PASSWORD 'foo'; -- create SCRAM verifier
CREATE ROLE regress_passwd6 ENCRYPTED PASSWORD 'md53725413363ab045e20521bf36b8d8d7f'; -- encrypted with MD5, use as it is
SELECT rolname, regexp_replace(rolpassword, '(SCRAM-SHA-256)\$(\d+):([a-zA-Z0-9+/=]+)\$([a-zA-Z0-9+=/]+):([a-zA-Z0-9+/=]+)', '\1$\2:<salt>$<storedkey>:<serverkey>') as rolpassword_masked
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd%'
    ORDER BY rolname, rolpassword;
     rolname     |                rolpassword_masked
-----------------+---------------------------------------------------
 regress_passwd1 | foo
 regress_passwd2 | md5dfa155cadd5f4ad57860162f3fab9cdb
 regress_passwd3 | md5530de4c298af94b3b9f7d20305d2a1bf
 regress_passwd4 | SCRAM-SHA-256$4096:<salt>$<storedkey>:<serverkey>
 regress_passwd5 | SCRAM-SHA-256$4096:<salt>$<storedkey>:<serverkey>
 regress_passwd6 | md53725413363ab045e20521bf36b8d8d7f
(6 rows)

DROP ROLE regress_passwd1;
DROP ROLE regress_passwd2;
DROP ROLE regress_passwd3;
DROP ROLE regress_passwd4;
DROP ROLE regress_passwd5;
DROP ROLE regress_passwd6;
-- all entries should have been removed
SELECT rolname, rolpassword
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd%'
    ORDER BY rolname, rolpassword;
 rolname | rolpassword
---------+-------------
(0 rows)
