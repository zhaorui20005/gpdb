## ######################################################################
##            ___   ___    _  _  ___ _____   ___ ___ ___ _____
##           |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _|
##           | |) | (_) | | .` | (_) || |   | _|| |) | |  | |
##           |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|
##            _____ _  _ ___ ___   ___ ___ _    ___ _
##           |_   _| || |_ _/ __| | __|_ _| |  | __| |
##             | | | __ || |\__ \ | _| | || |__| _||_|
##             |_| |_||_|___|___/ |_| |___|____|___(_)
##
## This is a generated file. Please edit the corresponding template
## file (example: templates/gpdb-tpl.yml) and regenerate the pipeline
## using appropriate tool (example: gen_pipeline.py -t prod).
## ----------------------------------------------------------------------
## Generated by gen_pipeline.py at: 2022-04-26 14:29:37.031999
## Template file: gpdb-tpl.yml
## OS Types: ['centos6', 'centos7', 'rhel8', 'oracle7', 'sles12', 'ubuntu18.04', 'photon3', 'win']
## Test Sections: ['ICW', 'Replication', 'ResourceGroups', 'Interconnect', 'CLI', 'UD', 'AA', 'Extensions', 'Gpperfmon']
## ======================================================================

## ======================================================================
##                   _
##   __ _ _ __   ___| |__   ___  _ __ ___
##  / _` | '_ \ / __| '_ \ / _ \| '__/ __|
## | (_| | | | | (__| | | | (_) | |  \__ \
##  \__,_|_| |_|\___|_| |_|\___/|_|  |___/
## ======================================================================
## NOTE: only one anchors section is allowed per file, so we define this
##  at the top of the file so anchors are usable as early as possible.
anchors:
- &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
  terraform_source: ccp_src/google/

- &ccp_default_vars
  instance_type: n1-standard-1
  PLATFORM: centos6

- &destroy_common
  action: destroy
  plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
  terraform_source: ccp_src/google/
  vars:
    aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
    aws_ebs_volume_type: standard

- &ccp_destroy
  put: terraform
  params:
    <<: *destroy_common
    env_name_file: terraform/name
  get_params:
    action: destroy

- &ccp_destroy_two_clusters
  in_parallel:
    - put: terraform_1
      params:
        <<: *destroy_common
        env_name_file: terraform_1/name
      get_params:
        action: destroy
    - put: terraform_2
      params:
        <<: *destroy_common
        env_name_file: terraform_2/name
      get_params:
        action: destroy

- &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
  AWS_DEFAULT_REGION: ((aws-region))
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: ((tf-bucket-name))
  CLOUD_PROVIDER: google

- &set_failed
  do:
    - task: on_failure_set_failed
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: gcr.io/data-gpdb-public-images/ccp
            tag: "latest"
        inputs:
          - name: ccp_src
          - name: terraform
        run:
          path: 'ccp_src/google/ccp_failed_test.sh'
        params:
          GOOGLE_CREDENTIALS: ((google-service-account-key))
          GOOGLE_PROJECT_ID: ((google-project-id))
          GOOGLE_ZONE: ((google-zone))
          GOOGLE_SERVICE_ACCOUNT: ((google-service-account))
          AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
          AWS_DEFAULT_REGION: ((tf-machine-region))
          BUCKET_PATH: clusters-google/
          BUCKET_NAME: ((tf-bucket-name))

- &set_failed_two_clusters_common
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: gcr.io/data-gpdb-public-images/ccp
      tag: "latest"
  run:
    path: 'ccp_src/google/ccp_failed_test.sh'
  params:
    GOOGLE_CREDENTIALS: ((google-service-account-key))
    GOOGLE_PROJECT_ID: ((google-project-id))
    GOOGLE_ZONE: ((google-zone))
    GOOGLE_SERVICE_ACCOUNT: ((google-service-account))
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((tf-machine-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))

- &terraform_cluster
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- &set_failed_two_clusters
  in_parallel:
    - task: on_failure_set_failed-1
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_1
    - task: on_failure_set_failed-2
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_2

## ======================================================================
##   __ _ _ __ ___  _   _ _ __  ___
##  / _` | '__/ _ \| | | | '_ \/ __|
## | (_| | | | (_) | |_| | |_) \__ \
##  \__, |_|  \___/ \__,_| .__/|___/
##  |___/                |_|
## ======================================================================

groups:
- name: all
  jobs:
  - check_format
  - compile_gpdb_centos6
  - prepare_binary_swap_gpdb_centos6
  - compile_gpdb_centos7
  - compile_gpdb_rhel8
  - test_gpdb_clients_rhel8
  - compile_gpdb_photon3
  - compile_gpdb_ubuntu18.04
  - compile_gpdb_sles12
  - test_gpdb_clients_sles12
  - compile_gpdb_clients_windows
  - test_gpdb_clients_windows
  ## --------------------------------------------------------------------
  - icw_gporca_centos6
  - icw_planner_centos6
  - icw_gporca_icproxy_centos6
  - icw_planner_icproxy_centos6
  - icw_planner_ictcp_centos6
  - gpexpand
  - pg_upgrade
  - icw_gporca_centos7
  - icw_planner_centos7
  - icw_gporca_icproxy_centos7
  - icw_planner_icproxy_centos7
  - fips_centos7
  - icw_mirrorless_centos7
  - unit_tests_gporca_centos7
  - gpdb_pitr_centos7
  - icw_gporca_rhel8
  - icw_planner_rhel8
  - icw_gporca_icproxy_rhel8
  - icw_planner_icproxy_rhel8
  - icw_mirrorless_rhel8
  - unit_tests_gporca_rhel8
  - icw_gporca_oracle7
  - icw_planner_oracle7
  - icw_gporca_ubuntu18.04
  - icw_planner_ubuntu18.04
  - icw_gporca_icproxy_ubuntu18.04
  - icw_planner_icproxy_ubuntu18.04
  - icw_mirrorless_ubuntu18.04
  - gate_icw_end
  ## --------------------------------------------------------------------
  - interconnect_centos6
  - interconnect_centos7
  - interconnect_rhel8
  ## --------------------------------------------------------------------
  - gate_resource_groups_start
  - resource_group_centos6
  - resource_group_centos7
  - resource_group_rhel8
  ## --------------------------------------------------------------------
  - gate_gpperfmon_start
  - gpperfmon_centos6
  - gpperfmon_centos7
  ## --------------------------------------------------------------------
  - gate_cli_start
  - cli_cross_subnet
  - gpmovemirrors
  - gpmovemirrors_rhel8
  - gpmovemirrors_ubuntu18
  - gppkg
  - gppkg_rhel8
  - gppkg_ubuntu18
  - analyzedb
  - analyzedb_rhel8
  - analyzedb_ubuntu18
  - gpreload
  - gpreload_rhel8
  - gpreload_ubuntu18
  - gpinitsystem
  - gpinitsystem_rhel8
  - gpinitsystem_ubuntu18
  - gpstate
  - gpstate_rhel8
  - gpstate_ubuntu18
  - replication_slots
  - replication_slots_rhel8
  - replication_slots_ubuntu18
  - gpactivatestandby
  - gpactivatestandby_rhel8
  - gpactivatestandby_ubuntu18
  - gpinitstandby
  - gpinitstandby_rhel8
  - gpinitstandby_ubuntu18
  - gp_bash_functions.sh
  - gp_bash_functions.sh_rhel8
  - gp_bash_functions.sh_ubuntu18
  - gpcheckcat
  - gpcheckcat_rhel8
  - gpcheckcat_ubuntu18
  - gpcheckperf
  - gpcheckperf_rhel8
  - gpcheckperf_ubuntu18
  - gprecoverseg
  - gprecoverseg_rhel8
  - gprecoverseg_ubuntu18
  - gprecoverseg_newhost
  - gprecoverseg_newhost_rhel8
  - gprecoverseg_newhost_ubuntu18
  - gpaddmirrors
  - gpaddmirrors_rhel8
  - gpaddmirrors_ubuntu18
  - gpconfig
  - gpconfig_rhel8
  - gpconfig_ubuntu18
  - gpssh-exkeys
  - gpssh-exkeys_rhel8
  - gpssh-exkeys_ubuntu18
  - gpstart
  - gpstart_rhel8
  - gpstart_ubuntu18
  - gpstop
  - gpstop_rhel8
  - gpstop_ubuntu18
  - check_centos
  ## --------------------------------------------------------------------
  - gate_advanced_analytics_start
  - madlib_build_gppkg
  - MADlib_Test_orca_centos6
  - MADlib_Test_planner_centos6
  - MADlib_Test_orca_centos7
  - MADlib_Test_planner_centos7
 ## ---------------------------------------------------------------------
  - icw_extensions_gpcloud_centos6


## ======================================================================

- name: Release
  jobs:
  - gate_release_candidate_start
  - Release_Candidate
  - Publish Server Builds
  - Build_Release_Candidate_RPMs

## ======================================================================

- name: Compile
  jobs:
  - compile_gpdb_centos6
  - compile_gpdb_centos7
  - compile_gpdb_rhel8
  - compile_gpdb_photon3
  - compile_gpdb_ubuntu18.04
  - compile_gpdb_sles12
  - compile_gpdb_clients_windows

## ======================================================================

- name: ICW
  jobs:
  - prepare_binary_swap_gpdb_centos6
  - icw_gporca_centos6
  - icw_planner_centos6
  - icw_gporca_icproxy_centos6
  - icw_planner_icproxy_centos6
  - icw_planner_ictcp_centos6
  - compile_gpdb_centos6
  - pg_upgrade
  - icw_gporca_centos7
  - icw_planner_centos7
  - icw_gporca_icproxy_centos7
  - icw_planner_icproxy_centos7
  - icw_mirrorless_centos7
  - unit_tests_gporca_centos7
  - compile_gpdb_centos7
  - fips_centos7
  - icw_gporca_rhel8
  - icw_planner_rhel8
  - icw_gporca_icproxy_rhel8
  - icw_planner_icproxy_rhel8
  - icw_mirrorless_rhel8
  - unit_tests_gporca_rhel8
  - compile_gpdb_rhel8
  - icw_gporca_oracle7
  - icw_planner_oracle7
  - icw_gporca_ubuntu18.04
  - icw_planner_ubuntu18.04
  - icw_gporca_icproxy_ubuntu18.04
  - icw_planner_icproxy_ubuntu18.04
  - icw_mirrorless_ubuntu18.04
  - gate_icw_end


## ======================================================================

- name: Extensions
  jobs:
  - icw_extensions_gpcloud_centos6


## ======================================================================

- name: Interconnect
  jobs:
  - compile_gpdb_centos6
  - interconnect_centos6
  - compile_gpdb_centos7
  - interconnect_centos7
  - compile_gpdb_rhel8
  - interconnect_rhel8

## ======================================================================

- name: ResourceGroups
  jobs:
  - gate_resource_groups_start
  - resource_group_centos6
  - compile_gpdb_centos6
  - resource_group_centos7
  - compile_gpdb_centos7
  - resource_group_rhel8
  - compile_gpdb_rhel8

## ======================================================================

- name: Gpperfmon
  jobs:
  - gate_gpperfmon_start
  - gpperfmon_centos6
  - compile_gpdb_centos6
  - gpperfmon_centos7
  - compile_gpdb_centos7

## ======================================================================

- name: CLI
  jobs:
  - gate_cli_start
  - compile_gpdb_ubuntu18.04
  - compile_gpdb_rhel8
  - cli_cross_subnet
  - gpmovemirrors
  - gpmovemirrors_rhel8
  - gpmovemirrors_ubuntu18
  - gppkg
  - gppkg_rhel8
  - gppkg_ubuntu18
  - analyzedb
  - analyzedb_rhel8
  - analyzedb_ubuntu18
  - gpreload
  - gpreload_rhel8
  - gpreload_ubuntu18
  - gpinitsystem
  - gpinitsystem_rhel8
  - gpinitsystem_ubuntu18
  - gpstate
  - gpstate_rhel8
  - gpstate_ubuntu18
  - replication_slots
  - replication_slots_rhel8
  - replication_slots_ubuntu18
  - gpactivatestandby
  - gpactivatestandby_rhel8
  - gpactivatestandby_ubuntu18
  - gpinitstandby
  - gpinitstandby_rhel8
  - gpinitstandby_ubuntu18
  - gp_bash_functions.sh
  - gp_bash_functions.sh_rhel8
  - gp_bash_functions.sh_ubuntu18
  - gpcheckcat
  - gpcheckcat_rhel8
  - gpcheckcat_ubuntu18
  - gpcheckperf
  - gpcheckperf_rhel8
  - gpcheckperf_ubuntu18
  - gprecoverseg
  - gprecoverseg_rhel8
  - gprecoverseg_ubuntu18
  - gprecoverseg_newhost
  - gprecoverseg_newhost_rhel8
  - gprecoverseg_newhost_ubuntu18
  - gpaddmirrors
  - gpaddmirrors_rhel8
  - gpaddmirrors_ubuntu18
  - gpconfig
  - gpconfig_rhel8
  - gpconfig_ubuntu18
  - gpssh-exkeys
  - gpssh-exkeys_rhel8
  - gpssh-exkeys_ubuntu18
  - gpstart
  - gpstart_rhel8
  - gpstart_ubuntu18
  - gpstop
  - gpstop_rhel8
  - gpstop_ubuntu18
  - check_centos
  - compile_gpdb_centos6
  - gpexpand
  - pg_upgrade


- name: AdvancedAnalytics
  jobs:
  - gate_advanced_analytics_start
  - madlib_build_gppkg
  - MADlib_Test_orca_centos6
  - MADlib_Test_planner_centos6
  - MADlib_Test_orca_centos7
  - MADlib_Test_planner_centos7

## ======================================================================
##                                           _
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  | |_ _   _ _ __   ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \ | __| | | | '_ \ / _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |_| | |_) |  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___|  \__|\__, | .__/ \___||___/
##                                               |___/|_|
## ======================================================================

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14
- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource
- name: pivnet
  type: registry-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
## ======================================================================
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___||___/
## ======================================================================

resources:
- name: ccp_src
  type: git
  source:
    branch: ((ccp-git-branch))
    private_key: ((ccp-git-key))
    uri: ((ccp-git-remote))

- name: terraform
  <<: *terraform_cluster

- name: terraform_1
  <<: *terraform_cluster

- name: terraform_2
  <<: *terraform_cluster

- name: terraform.d
  source:
    access_key_id: ((bucket-access-key-id))
    bucket: ccp-terraform-provider-plugins
    region_name: ((aws-region))
    secret_access_key: ((bucket-secret-access-key))
    versioned_file: plugin-cache.tgz
  type: s3

- name: alpine-docker
  type: registry-image
  source:
    repository: alpine
    tag: latest

- name: ccp-image
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/ccp
    tag: 'latest'

- name: icw_planner_centos6_dump
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/icw_planner_centos6_dump/dump.sql.xz

- name: gpdb_src
  type: git
  source:
    branch: ((gpdb-git-branch))
    uri: ((gpdb-git-remote))
    ignore_paths:
    - gpdb-doc/*
    - README*

- name: previous_gpdb_rpm
  type: pivnet
  source:
    api_token: ((pivotal-gpdb-pivnet-api-token))
    product_slug: pivotal-gpdb
    product_version: ((pivotal-gpdb-pivnet-product-version))


- name: gpdb6-centos6-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-centos6-build
    tag: latest

- name: gpdb6-centos6-test
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-centos6-test
    tag: latest

- name: gpdb6-centos7-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-centos7-build
    tag: latest

- name: gpdb6-centos7-test
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-centos7-test
    tag: latest

- name: gpdb6-rhel8-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-private-images/gpdb6-rhel8-build
    tag: latest
    username: _json_key
    password: ((container-registry-readonly-service-account-key))
- name: gpdb6-rhel8-test
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-private-images/gpdb6-rhel8-test
    tag: latest
    username: _json_key
    password: ((container-registry-readonly-service-account-key))

- name: gpdb6-photon3-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-photon3-build
    tag: latest

- name: gpdb6-oracle7-test
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-oel7-test
    tag: latest


- name: gpdb6-ubuntu18.04-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-ubuntu18.04-build
    tag: latest

- name: gpdb6-ubuntu18.04-test
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/gpdb6-ubuntu18.04-test
    tag: latest


- name: gpdb6-sles12-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-private-images/gpdb6-sles12-build
    tag: latest
    username: _json_key
    password: ((container-registry-readonly-service-account-key))

- name: bin_gpdb_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_centos6/bin_gpdb.tar.gz

- name: bin_gpdb_clients_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_centos6/bin_gpdb_clients.tar.gz

- name: server-build-centos6
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-build-(.*)-rhel6_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_centos6_icw_green
  type: s3
  source:
    access_key_id: ((bucket-access-key-id))
    bucket: ((bucket-name))
    region_name: ((aws-region))
    secret_access_key: ((bucket-secret-access-key))
    versioned_file: bin_gpdb_centos6/gpdb_branch_6X_STABLE/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_centos6_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(.*)-rhel6_x86_64((rc-build-type-gcs)).tar.gz
- name: bin_gpdb_centos7_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_ubuntu18.04_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(.*)-ubuntu18.04_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_photon3_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(.*)-photon3_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_rhel8_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(.*)-rhel8_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_centos6_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-(.*)-rhel6_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_centos7_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_rhel8_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-(.*)-rhel8_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_sles12_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-(.*)-sles12_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_ubuntu18.04_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-(.*)-ubuntu18.04_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_photon3_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-(.*)-photon3_x86_64((rc-build-type-gcs)).tar.gz

- name: server_src_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server-src/published/gpdb6/server-src-rc-*.tar.gz

- name: gpdb_rpm_installer_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/greenplum-db-(.*)-rhel6-x86_64((rc-build-type-gcs)).rpm

- name: gpdb_rpm_installer_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/greenplum-db-(.*)-rhel7-x86_64((rc-build-type-gcs)).rpm

- name: gpdb_rpm_installer_rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/greenplum-db-(.*)-rhel8-x86_64((rc-build-type-gcs)).rpm

- name: gpdb_rpm_installer_photon3
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/greenplum-db-(.*)-photon3-x86_64((rc-build-type-gcs)).rpm

- name: greenplum-database-release
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/greenplum-db/greenplum-database-release.git

- name: license_file
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-for-oss))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: osl/released/gpdb6/open_source_license_greenplum-database-6.0.0-97773a0-(.*).txt

- name: binary_swap_gpdb_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/binary_swap_gpdb_centos6/bin_gpdb.tar.gz

- name: bin_gpdb_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_centos7/bin_gpdb.tar.gz

- name: bin_gpdb_clients_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_centos7/bin_gpdb_clients.tar.gz

- name: server-build-centos7
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-build-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_rhel8/bin_gpdb.tar.gz

- name: bin_gpdb_clients_rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_rhel8/bin_gpdb_clients.tar.gz

- name: server-build-rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-build-(.*)-rhel8_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_ubuntu18.04/bin_gpdb.tar.gz

- name: bin_gpdb_clients_ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_ubuntu18.04/bin_gpdb_clients.tar.gz

- name: server-build-ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-build-(.*)-ubuntu18.04_x86_64((rc-build-type-gcs)).tar.gz
- name: bin_gpdb_photon3
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_photon3/bin_gpdb.tar.gz

- name: bin_gpdb_clients_photon3
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_photon3/bin_gpdb_clients.tar.gz

- name: server-build-photon3
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-build-(.*)-photon3_x86_64((rc-build-type-gcs)).tar.gz
- name: bin_gpdb_sles12
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_sles12/bin_gpdb.tar.gz

- name: bin_gpdb_clients_sles12
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_sles12/bin_gpdb_clients.tar.gz

- name: terraform_windows
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project: ((google-project-id))
      region: ((google-region))
      region_zone: ((google-zone))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: gp-clients-windows-tests-google/

- name: bin_gpdb_clients_windows
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_windows/greenplum-clients-x86_64.tar.gz

- name: bin_gpdb_clients_windows_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/gpdb6/clients-rc-*-windows_x86_64((rc-build-type-gcs)).msi
- name: madlib_src
  type: git
  source:
    branch: ((madlib-git-branch))
    tag_filter: ((madlib-git-tag-filter))
    uri: ((madlib-git-remote))

- name: madlib_ci
  type: git
  source:
    tag_filter: ((madlib-ci-tag-filter))
    uri: ((madlib-ci-git-remote))
    private_key: ((madlib-ci-git-key))

- name: madlib_gppkg_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/madlib_gppkg/madlib-master-gp6-rhel6-x86_64.gppkg

- name: madlib_gppkg_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/madlib_gppkg/madlib-master-gp6-rhel7-x86_64.gppkg

- name: cmake_tar
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/madlib-snowflakes/cmake-(3.5.2)-Linux-x86_64.tar.gz

- name: pyxb
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/madlib-snowflakes/PyXB-(1.2.6).tar.gz

- name: eigen
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/madlib-snowflakes/(3.2).tar.gz

- name: boost
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/madlib-snowflakes/boost_(1_61_0).tar.gz

- name: postgres_for_fdw
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/postgres-fdw-dependencies/postgresql-(10.4).tar.gz

- name: reduced-frequency-trigger
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
    start: ((reduced-frequency-trigger-start))
    stop: ((reduced-frequency-trigger-stop))


## ======================================================================
##    _       _
##   (_) ___ | |__  ___
##   | |/ _ \| '_ \/ __|
##   | | (_) | |_) \__ \
##  _/ |\___/|_.__/|___/
## |__/
## ======================================================================

jobs:

## ======================================================================
##  ____  _            _ _              _   _       _ _     _____         _
## |  _ \(_)_ __   ___| (_)_ __   ___  | | | |_ __ (_) |_  |_   _|__  ___| |_ ___
## | |_) | | '_ \ / _ \ | | '_ \ / _ \ | | | | '_ \| | __|   | |/ _ \/ __| __/ __|
## |  __/| | |_) |  __/ | | | | |  __/ | |_| | | | | | |_    | |  __/\__ \ |_\__ \
## |_|   |_| .__/ \___|_|_|_| |_|\___|  \___/|_| |_|_|\__|   |_|\___||___/\__|___/
##         |_|
## ======================================================================

- name: check_format
  plan:
    - get: gpdb_src
      trigger: true
    - task: check_format
      file: gpdb_src/concourse/tasks/check_format.yml

## ======================================================================
##   ____                      _ _
##  / ___|___  _ __ ___  _ __ (_) | ___
## | |   / _ \| '_ ` _ \| '_ \| | |/ _ \
## | |__| (_) | | | | | | |_) | | |  __/
##  \____\___/|_| |_| |_| .__/|_|_|\___|
##                      |_|
## ======================================================================

- name: compile_gpdb_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
          - check_format
        trigger: ((gpdb_src-trigger-flag))
      - get: reduced-frequency-trigger
        trigger: ((reduced-frequency-trigger-flag))
      - get: gpdb6-centos6-build
  - task: compile_gpdb
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    image: gpdb6-centos6-build
    params:
      CONFIGURE_FLAGS: ((configure_flags_with_extensions))
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb_centos6
        params:
          file: gpdb_artifacts/bin_gpdb.tar.gz
      - put: bin_gpdb_clients_centos6
        params:
          file: gpdb_artifacts/bin_gpdb_clients.tar.gz

- name: compile_gpdb_centos7
  plan:
  - in_parallel:
      steps:
      - get: reduced-frequency-trigger
        trigger: ((reduced-frequency-trigger-flag))
      - get: gpdb_src
        passed:
          - check_format
        trigger: ((gpdb_src-trigger-flag))
      - get: gpdb6-centos7-build
  - task: compile_gpdb
    image: gpdb6-centos7-build
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: ((configure_flags_with_extensions))
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb_centos7
        params:
          file: gpdb_artifacts/bin_gpdb.tar.gz
      - put: bin_gpdb_clients_centos7
        params:
          file: gpdb_artifacts/bin_gpdb_clients.tar.gz

- name: compile_gpdb_photon3
  plan:
  - in_parallel:
      steps:
      - get: reduced-frequency-trigger
        trigger: ((reduced-frequency-trigger-flag))
      - get: gpdb_src
        passed:
          - check_format
        trigger: ((gpdb_src-trigger-flag))
      - get: gpdb6-photon3-build
  - task: compile_gpdb
    image: gpdb6-photon3-build
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: ((configure_flags_with_extensions))
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb_photon3
        params:
          file: gpdb_artifacts/bin_gpdb.tar.gz
      - put: bin_gpdb_clients_photon3
        params:
          file: gpdb_artifacts/bin_gpdb_clients.tar.gz
- name: prepare_binary_swap_gpdb_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
      - get: gpdb_rpm
        resource: previous_gpdb_rpm
        trigger: true
        params:
          globs: [greenplum-db-6*-rhel6-x86_64.rpm]
      - get: gpdb6-centos6-build
  - task: generate_previous_bin_gpdb
    file: gpdb_src/concourse/tasks/extract_rpm.yml
    image: gpdb6-centos6-build
  - put: binary_swap_gpdb_centos6
    params:
      file: gpdb_artifacts/bin_gpdb.tar.gz

- name: compile_gpdb_rhel8
  plan:
    - in_parallel:
        steps:
          - get: reduced-frequency-trigger
            trigger: ((reduced-frequency-trigger-flag))
          - get: gpdb_src
            passed:
              - check_format
            trigger: ((gpdb_src-trigger-flag))
          - get: gpdb6-rhel8-build
    - task: compile_gpdb
      image: gpdb6-rhel8-build
      file: gpdb_src/concourse/tasks/compile_gpdb.yml
      params:
        CONFIGURE_FLAGS: ((configure_flags_with_extensions))
        BLD_TARGETS: "clients"
        RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
    - in_parallel:
        steps:
          - put: bin_gpdb_rhel8
            params:
              file: gpdb_artifacts/bin_gpdb.tar.gz
          - put: bin_gpdb_clients_rhel8
            params:
              file: gpdb_artifacts/bin_gpdb_clients.tar.gz

- name: test_gpdb_clients_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            trigger: true
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb_clients
            resource: bin_gpdb_clients_rhel8
            passed: [compile_gpdb_rhel8]
          - get: gpdb6-rhel8-build
    - task: run_tests
      image: gpdb6-rhel8-build
      file: gpdb_src/concourse/tasks/test_gpdb_clients.yml

- name: compile_gpdb_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: reduced-frequency-trigger
          trigger: ((reduced-frequency-trigger-flag))
        - get: gpdb_src
          passed:
            - check_format
          trigger: ((gpdb_src-trigger-flag))
        - get: gpdb6-ubuntu18.04-build
    - task: compile_gpdb
      image: gpdb6-ubuntu18.04-build
      file: gpdb_src/concourse/tasks/compile_gpdb.yml
      params:
        CONFIGURE_FLAGS: ((configure_flags_with_extensions))
        BLD_TARGETS: "clients"
        RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
    - in_parallel:
        steps:
        - put: bin_gpdb_ubuntu18.04
          params:
            file: gpdb_artifacts/bin_gpdb.tar.gz
        - put: bin_gpdb_clients_ubuntu18.04
          params:
            file: gpdb_artifacts/bin_gpdb_clients.tar.gz


- name: compile_gpdb_sles12
  plan:
    - in_parallel:
        steps:
        - get: reduced-frequency-trigger
          trigger: ((reduced-frequency-trigger-flag))
        - get: gpdb_src
          passed:
            - check_format
          trigger: ((gpdb_src-trigger-flag))
        - get: gpdb6-sles12-build
    - task: compile_gpdb
      image: gpdb6-sles12-build
      file: gpdb_src/concourse/tasks/compile_gpdb.yml
      params:
        CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
        TARGET_OS: sles
        TARGET_OS_VERSION: "12"
        BLD_TARGETS: "clients"
        RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
    - in_parallel:
        steps:
        - put: bin_gpdb_sles12
          params:
            file: gpdb_artifacts/bin_gpdb.tar.gz
        - put: bin_gpdb_clients_sles12
          params:
            file: gpdb_artifacts/bin_gpdb_clients.tar.gz

- name: test_gpdb_clients_sles12
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            trigger: true
            passed: [compile_gpdb_sles12]
          - get: bin_gpdb
            resource: bin_gpdb_sles12
            passed: [compile_gpdb_sles12]
          - get: bin_gpdb_clients
            resource: bin_gpdb_clients_sles12
            passed: [compile_gpdb_sles12]
          - get: gpdb6-sles12-build
    - task: run_tests
      image: gpdb6-sles12-build
      file: gpdb_src/concourse/tasks/test_gpdb_clients.yml

- name: compile_gpdb_clients_windows
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
      - get: gpdb6-centos6-build
  - task: compile_gpdb_windows_remote
    file: gpdb_src/concourse/tasks/compile_gpdb_remote_windows.yml
    image: gpdb6-centos6-build
    params:
      REMOTE_HOST: ((remote_win_host_build))
      REMOTE_PORT: ((remote_win_port_build))
      REMOTE_USER: ((remote_win_user_build))
      REMOTE_KEY: ((remote_win_key_build))
  - put: bin_gpdb_clients_windows
    params:
      file: "gpdb_artifacts/greenplum-clients-x86_64.tar.gz"

- name: test_gpdb_clients_windows
  plan:
  - in_parallel:
      steps:
      - get: ccp_src
      - get: gpdb_src
        trigger: true
        passed: [compile_gpdb_clients_windows]
      - get: gpdb6-centos7-test
      - get: bin_gpdb_clients_windows
        passed: [compile_gpdb_clients_windows]
      - get: bin_gpdb
        resource: bin_gpdb_centos7_rc
      - get: terraform.d
        params:
          unpack: true
  - put: terraform_windows
    params:
      action: create
      delete_on_failure: true
      generate_random_name: true
      plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
      terraform_source: ccp_src/gpdb_windows_client_test/
  - task: run_tests
    file: gpdb_src/concourse/tasks/windows_remote_test.yml
    image: gpdb6-centos7-test
    params:
      REMOTE_PORT: ((remote_win_port_test))
      REMOTE_USER: ((remote_win_user_test))
      REMOTE_KEY: ((remote_win_key_test))
  ensure:
    put: terraform_windows
    params:
      action: destroy
      plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
      env_name_file: terraform_windows/name
      terraform_source: ccp_src/gpdb_windows_client_test/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy

## ======================================================================
##  ___ ______        __
## |_ _/ ___\ \      / /
##  | | |    \ \ /\ / /
##  | | |___  \ V  V /
## |___\____|  \_/\_/
## ======================================================================

- name: icw_planner_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb
        passed: [compile_gpdb_centos6]
        resource: bin_gpdb_centos6
        trigger: true
      - get: binary_swap_gpdb
        passed: [prepare_binary_swap_gpdb_centos6]
        resource: binary_swap_gpdb_centos6
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: [icw-centos6]
    file: gpdb_src/concourse/tasks/ic_gpdb_binary_swap.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      TEST_BINARY_SWAP: ((test-binary-swap))
      CONFIGURE_FLAGS: ((configure_flags))
      DUMP_DB: "true"
  - put: icw_planner_centos6_dump
    params:
      file: sqldump/dump.sql.xz

- name: icw_gporca_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [compile_gpdb_centos6]
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: [icw-centos6]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_icproxy_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb
        passed: [compile_gpdb_centos6]
        resource: bin_gpdb_centos6
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: [icw-centos6]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=off' EXTRA_REGRESS_OPTS=--exclude-tests=external_table installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_icproxy_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [compile_gpdb_centos6]
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: [icw-centos6]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=on' EXTRA_REGRESS_OPTS=--exclude-tests=external_table installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_ictcp_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [compile_gpdb_centos6]
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: [icw-centos6]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=tcp -c optimizer=off' installcheck-world
      TEST_OS: centos

- name: icw_gporca_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: [icw-centos7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: [icw-centos7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_icproxy_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: [icw-centos7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_icproxy_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: [icw-centos7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_mirrorless_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: [icw-centos7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-mirrorless
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
      WITH_MIRRORS: false
      BLDWRAP_POSTGRES_CONF_ADDONS:
        - wal_level=minimal
        - max_wal_senders=0
        - gp_dispatch_keepalives_idle=30
        - gp_dispatch_keepalives_interval=10
        - gp_dispatch_keepalives_count=4

- name: unit_tests_gporca_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: gpdb6-centos7-build
  - task: unit_tests_gporca
    file: gpdb_src/concourse/tasks/unit_tests_gporca.yml
    image: gpdb6-centos7-build

- name: gpdb_pitr_centos7
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_centos7]
          - get: bin_gpdb
            passed: [compile_gpdb_centos7]
            resource: bin_gpdb_centos7
            trigger: true
          - get: gpdb6-centos7-test
    - task: gpdb_pitr
      file: gpdb_src/concourse/tasks/gpdb_pitr.yml
      image: gpdb6-centos7-test
      params:
        WITH_MIRRORS: true
        TEST_OS: centos
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: gpdb6-rhel8-test
    - task: ic_gpdb
      tags: [icw-rhel8]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-rhel8-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
        TEST_OS: centos
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb
            passed: [compile_gpdb_rhel8]
            resource: bin_gpdb_rhel8
            trigger: true
          - get: gpdb6-rhel8-test
    - task: ic_gpdb
      tags: [icw-rhel8]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-rhel8-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
        TEST_OS: centos
        CONFIGURE_FLAGS: ((configure_flags))
- name: icw_gporca_icproxy_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: gpdb6-rhel8-test
    - task: ic_gpdb
      tags: [icw-rhel8]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-rhel8-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=on' installcheck-world
        TEST_OS: centos
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_icproxy_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb
            passed: [compile_gpdb_rhel8]
            resource: bin_gpdb_rhel8
            trigger: true
          - get: gpdb6-rhel8-test
    - task: ic_gpdb
      tags: [icw-rhel8]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-rhel8-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=off' installcheck-world
        TEST_OS: centos
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_mirrorless_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-rhel8-test
  - task: ic_gpdb
    tags: [icw-rhel8]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-rhel8-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-mirrorless
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
      WITH_MIRRORS: false
      BLDWRAP_POSTGRES_CONF_ADDONS:
        - wal_level=minimal
        - max_wal_senders=0
        - gp_dispatch_keepalives_idle=30
        - gp_dispatch_keepalives_interval=10
        - gp_dispatch_keepalives_count=4

- name: unit_tests_gporca_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: gpdb6-rhel8-build
    - task: unit_tests_gporca
      file: gpdb_src/concourse/tasks/unit_tests_gporca.yml
      image: gpdb6-rhel8-build

- name: icw_gporca_oracle7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-oracle7-test
  - task: ic_gpdb
    tags: [icw-oracle7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-oracle7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_oracle7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-oracle7-test
  - task: ic_gpdb
    tags: [icw-oracle7]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-oracle7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - get: postgres_for_fdw
          params:
            unpack: true
        - get: gpdb6-ubuntu18.04-test
    - task: ic_gpdb
      tags: [icw-ubuntu18.04]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          passed: [compile_gpdb_ubuntu18.04]
          resource: bin_gpdb_ubuntu18.04
          trigger: true
        - get: postgres_for_fdw
          params:
            unpack: true
        - get: gpdb6-ubuntu18.04-test
    - task: ic_gpdb
      tags: [icw-ubuntu18.04]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_icproxy_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - get: postgres_for_fdw
          params:
            unpack: true
        - get: gpdb6-ubuntu18.04-test
    - task: ic_gpdb
      tags: [icw-ubuntu18.04]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=on' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_icproxy_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          passed: [compile_gpdb_ubuntu18.04]
          resource: bin_gpdb_ubuntu18.04
          trigger: true
        - get: postgres_for_fdw
          params:
            unpack: true
        - get: gpdb6-ubuntu18.04-test
    - task: ic_gpdb
      tags: [icw-ubuntu18.04]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=off' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: ((configure_flags))

- name: icw_mirrorless_ubuntu18.04
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_ubuntu18.04]
      - get: bin_gpdb
        passed: [compile_gpdb_ubuntu18.04]
        resource: bin_gpdb_ubuntu18.04
        trigger: true
      - get: postgres_for_fdw
        params:
          unpack: true
      - get: gpdb6-ubuntu18.04-test
  - task: ic_gpdb
    tags: [icw-ubuntu18.04]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-ubuntu18.04-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-mirrorless
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
      WITH_MIRRORS: false
      BLDWRAP_POSTGRES_CONF_ADDONS:
        - wal_level=minimal
        - max_wal_senders=0
        - gp_dispatch_keepalives_idle=30
        - gp_dispatch_keepalives_interval=10
        - gp_dispatch_keepalives_count=4


- name: fips_centos7
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos7]
    - get: gpdb_binary
      resource: bin_gpdb_centos7
      passed: [compile_gpdb_centos7]
      trigger: true
    - get: ccp_src
    - get: ccp-image
    - get: terraform.d
      params:
        unpack: true
  - put: terraform
    params:
      action: create
      delete_on_failure: true
      generate_random_name: true
      plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
      terraform_source: ccp_src/google/
      vars:
        PLATFORM: centos7
        boot_disk_image: data-gp-releng/gpdb-prod-centos-7-fips
        instance_type: n1-standard-2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      AWS_DEFAULT_REGION: ((aws-region))
      BUCKET_PATH: clusters-google/
      BUCKET_NAME: ((tf-bucket-name))
      CLOUD_PROVIDER: google
      PLATFORM: centos7
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: test_fips
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: gcr.io/data-gpdb-public-images/ccp
          tag: "latest"
      inputs:
        - name: ccp_src
        - name: cluster_env_files
      run:
        path: bash
        args:
          - -c
          - |
            set -e

            ccp_src/scripts/setup_ssh_to_cluster.sh
            ssh -t mdw <<EOF
                set -e

                # python regression test for "ERROR:root:code for hash md5 was not found."
                if ! python -c "import hashlib"; then
                    echo "Failed to import hashlib on a FIPS enabled environment."
                    exit 1
                fi
                echo "Successfully imported hashlib on a FIPS enabled environment."
            EOF
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed
- name: gate_icw_end
  plan:
  - in_parallel:
      steps:
      - get: bin_gpdb_centos6
        passed:
        - icw_gporca_centos6
        - icw_planner_centos6
        - icw_gporca_icproxy_centos6
        - icw_planner_icproxy_centos6
        - icw_planner_ictcp_centos6
        - icw_extensions_gpcloud_centos6
      - get: icw_planner_centos6_dump
        passed:
        - icw_planner_centos6
      - get: gpdb_src
        passed:
        - icw_gporca_centos6
        - icw_planner_centos6
        - icw_gporca_icproxy_centos6
        - icw_planner_icproxy_centos6
        - icw_planner_ictcp_centos6
        - icw_extensions_gpcloud_centos6
        - icw_gporca_centos7
        - icw_gporca_icproxy_centos7
        - icw_planner_icproxy_centos7
        - icw_mirrorless_centos7
        - unit_tests_gporca_centos7
        - gpdb_pitr_centos7
        - icw_gporca_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - icw_mirrorless_rhel8
        - unit_tests_gporca_rhel8
        trigger: true
  - put: bin_gpdb_centos6_icw_green
    params:
      file: bin_gpdb_centos6/bin_gpdb.tar.gz


## ======================================================================
##  ___ _   _ _____ _____ ____   ____ ___  _   _ _   _ _____ ____ _____
## |_ _| \ | |_   _| ____|  _ \ / ___/ _ \| \ | | \ | | ____/ ___|_   _|
##  | ||  \| | | | |  _| | |_) | |  | | | |  \| |  \| |  _|| |     | |
##  | || |\  | | | | |___|  _ <| |__| |_| | |\  | |\  | |__| |___  | |
## |___|_| \_| |_| |_____|_| \_\\____\___/|_| \_|_| \_|_____\____| |_|
## ======================================================================
- name: interconnect_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb
        passed: [compile_gpdb_centos6]
        resource: bin_gpdb_centos6
        trigger: true
      - get: gpdb6-centos6-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off'
        BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
      TEST_OS: centos
- name: interconnect_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: gpdb6-centos7-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off'
        BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
      TEST_OS: centos
- name: interconnect_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: true
      - get: gpdb6-rhel8-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-rhel8-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off'
        BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
      TEST_OS: centos

## ======================================================================
##  ____                                     ____
## |  _ \ ___  ___  ___  _   _ _ __ ___ ___ / ___|_ __ ___  _   _ _ __  ___
## | |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \ |  _| '__/ _ \| | | | '_ \/ __|
## |  _ <  __/\__ \ (_) | |_| | | | (_|  __/ |_| | | | (_) | |_| | |_) \__ \
## |_| \_\___||___/\___/ \__,_|_|  \___\___|\____|_|  \___/ \__,_| .__/|___/
##                                                               |_|
## ======================================================================

- name: gate_resource_groups_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_centos6
        - compile_gpdb_centos7
        - compile_gpdb_rhel8
        trigger: true
      - get: bin_gpdb_centos6
        passed:
        - compile_gpdb_centos6
      - get: bin_gpdb_centos7
        passed:
        - compile_gpdb_centos7
      - get: bin_gpdb_rhel8
        passed:
        - compile_gpdb_rhel8
      - get: binary_swap_gpdb
        passed: [prepare_binary_swap_gpdb_centos6]
        resource: binary_swap_gpdb_centos6
        trigger: true

- name: resource_group_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_resource_groups_start]
      - get: gpdb_binary
        resource: bin_gpdb_centos6
        passed: [gate_resource_groups_start]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: binary_swap_gpdb
        passed: [gate_resource_groups_start]
        resource: binary_swap_gpdb_centos6
        trigger: true
      - get: terraform.d
        params:
          unpack: true
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
    image: ccp-image
    params:
      TEST_OS: centos6
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: resource_group_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_resource_groups_start]
      - get: gpdb_binary
        resource: bin_gpdb_centos7
        passed: [gate_resource_groups_start]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: binary_swap_gpdb
        passed: [gate_resource_groups_start]
        resource: binary_swap_gpdb_centos6
        trigger: true
      - get: terraform.d
        params:
          unpack: true
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        PLATFORM: centos7
        instance_type: n1-standard-2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos7
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
    image: ccp-image
    params:
      TEST_OS: centos7
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed


- name: resource_group_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_resource_groups_start]
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [gate_resource_groups_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: binary_swap_gpdb
            passed: [gate_resource_groups_start]
            resource: binary_swap_gpdb_centos6
            trigger: true
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          PLATFORM: rhel8
          instance_type: n1-standard-2
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: rhel8
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
    - task: run_tests
      file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
      image: ccp-image
      params:
        TEST_OS: rhel8
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed



## ======================================================================
##                               __
##   __ _ _ __  _ __   ___ _ __ / _|_ __ ___   ___  _ __
##  / _` | '_ \| '_ \ / _ \ '__| |_| '_ ` _ \ / _ \| '_ \
## | (_| | |_) | |_) |  __/ |  |  _| | | | | | (_) | | | |
##  \__, | .__/| .__/ \___|_|  |_| |_| |_| |_|\___/|_| |_|
##  |___/|_|   |_|
## ======================================================================

- name: gate_gpperfmon_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_centos6
        - compile_gpdb_centos7
        - compile_gpdb_rhel8
        trigger: true
      - get: bin_gpdb_centos6
        passed:
        - compile_gpdb_centos6
      - get: bin_gpdb_centos7
        passed:
        - compile_gpdb_centos7
      - get: bin_gpdb_rhel8
        passed:
        - compile_gpdb_rhel8
      - get: binary_swap_gpdb
        passed: [prepare_binary_swap_gpdb_centos6]
        resource: binary_swap_gpdb_centos6
        trigger: true

- name: gpperfmon_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
          - gpMgmt/bin/pythonSrc/ext
        passed: [gate_gpperfmon_start]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [gate_gpperfmon_start]
        trigger: true
      - get: gpdb6-centos6-test
  - task: gpperfmon
    file: gpdb_src/concourse/tasks/behave_gpdb.yml
    image: gpdb6-centos6-test
    params:
      BEHAVE_TAGS: gpperfmon

- name: gpperfmon_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
          - gpMgmt/bin/pythonSrc/ext
        passed: [gate_gpperfmon_start]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [gate_gpperfmon_start]
        trigger: true
      - get: gpdb6-centos7-test
  - task: gpperfmon
    file: gpdb_src/concourse/tasks/behave_gpdb.yml
    image: gpdb6-centos7-test
    params:
      BEHAVE_TAGS: gpperfmon



## ======================================================================
##   ____ _     ___
##  / ___| |   |_ _|
## | |   | |    | |
## | |___| |___ | |
##  \____|_____|___|
## ======================================================================

- name: gate_cli_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_centos6
        trigger: true
      - get: bin_gpdb_centos6
        passed:
        - compile_gpdb_centos6

- name: check_centos
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_cli_start]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [gate_cli_start]
        trigger: true
      - get: gpdb6-centos6-test
  - task: check_centos
    file: gpdb_src/concourse/tasks/gpMgmt_check_gpdb.yml
    image: gpdb6-centos6-test
    params:
      TEST_OS: centos

- name: gpmovemirrors
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpmovemirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpmovemirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
              

- name: gpmovemirrors_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpmovemirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpmovemirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
              

- name: gppkg
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gppkg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gppkg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster
              

- name: gppkg_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gppkg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gppkg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster
              

- name: analyzedb
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: analyzedb_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
              

- name: analyzedb_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: analyzedb_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
              

- name: gpreload
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpreload_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpreload --tags=~concourse_cluster,demo_cluster
              

- name: gpreload_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpreload_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpreload --tags=~concourse_cluster,demo_cluster
              

- name: gpinitsystem
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpinitsystem_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
              

- name: gpinitsystem_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpinitsystem_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
              

- name: gpstate
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstate_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpstate_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
              

- name: gpstate_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstate_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpstate_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
              

- name: replication_slots
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: replication_slots_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
              

- name: replication_slots_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: replication_slots_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
              

- name: gpactivatestandby
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpactivatestandby_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpactivatestandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
              

- name: gpactivatestandby_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpactivatestandby_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpactivatestandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
              

- name: gpinitstandby
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpinitstandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
              

- name: gpinitstandby_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpinitstandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
              

- name: gp_bash_functions.sh
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gp_bash_functions.sh_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gp_bash_functions.sh --tags=~concourse_cluster,demo_cluster
              

- name: gp_bash_functions.sh_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gp_bash_functions.sh_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gp_bash_functions.sh --tags=~concourse_cluster,demo_cluster
              

- name: gpcheckcat
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckcat_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpcheckcat_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
              

- name: gpcheckcat_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckcat_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpcheckcat_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
              

- name: gpcheckperf
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckperf_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpcheckperf --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpcheckperf_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckperf --tags=~concourse_cluster,demo_cluster
              

- name: gpcheckperf_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckperf_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckperf --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpcheckperf_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpcheckperf --tags=~concourse_cluster,demo_cluster
              

- name: gprecoverseg
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                number_of_nodes: 3
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gprecoverseg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
              

- name: gprecoverseg_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 3
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gprecoverseg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
              

- name: gprecoverseg_newhost
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                number_of_nodes: 7
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - get: alpine-docker
          - task: reserve_spare_hosts
            image: alpine-docker
            config:
              platform: linux
              inputs:
                - name: cluster_env_files
              outputs:
                - name: cluster_env_files
              run:
                path: sh
                args:
                  - -exc
                  - |
                    # modify the hostfile_init used by gpinitsystem to exclude the last two hosts, so they are spares
                    cp cluster_env_files/hostfile_init cluster_env_files/hostfile_init_orig
                    head -n -2 cluster_env_files/hostfile_init_orig > cluster_env_files/hostfile_init
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_newhost_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              SUDO_ACCESS_ON_HOSTS: 1
              BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gprecoverseg_newhost_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=~concourse_cluster,demo_cluster
              

- name: gprecoverseg_newhost_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 7
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - get: alpine-docker
          - task: reserve_spare_hosts
            image: alpine-docker
            config:
              platform: linux
              inputs:
                - name: cluster_env_files
              outputs:
                - name: cluster_env_files
              run:
                path: sh
                args:
                  - -exc
                  - |
                    # modify the hostfile_init used by gpinitsystem to exclude the last two hosts, so they are spares
                    cp cluster_env_files/hostfile_init cluster_env_files/hostfile_init_orig
                    head -n -2 cluster_env_files/hostfile_init_orig > cluster_env_files/hostfile_init
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_newhost_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              SUDO_ACCESS_ON_HOSTS: 1
              SUDO_MDW_USERNAME: ubuntu
              BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gprecoverseg_newhost_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=~concourse_cluster,demo_cluster
              

- name: gpaddmirrors
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpaddmirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpaddmirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
              

- name: gpaddmirrors_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpaddmirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpaddmirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
              

- name: gpconfig
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpconfig_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
              LC_CTYPE: en_US.UTF-8
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpconfig_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
              LC_CTYPE: en_US.UTF-8

- name: gpconfig_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpconfig_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
              LC_CTYPE: en_US.UTF-8
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpconfig_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
              LC_CTYPE: en_US.UTF-8

- name: gpssh-exkeys
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpssh-exkeys_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpssh-exkeys_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
              

- name: gpssh-exkeys_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpssh-exkeys_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpssh-exkeys_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
              

- name: gpstart
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstart_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpstart_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=~concourse_cluster,demo_cluster
              

- name: gpstart_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstart_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpstart_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=~concourse_cluster,demo_cluster
              

- name: gpstop
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb6-centos6-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstop_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos6
            passed: [gate_cli_start]
            trigger: true
          - task: gpstop_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-centos6-test
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
              

- name: gpstop_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb6-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstop_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpstop_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
              


- name: gpmovemirrors_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpmovemirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpmovemirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
              
- name: gppkg_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gppkg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gppkg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster
              
- name: analyzedb_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: analyzedb_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
              
- name: gpreload_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpreload_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpreload --tags=~concourse_cluster,demo_cluster
              
- name: gpinitsystem_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpinitsystem_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
              
- name: gpstate_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstate_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpstate_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
              
- name: replication_slots_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: replication_slots_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
              
- name: gpactivatestandby_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpactivatestandby_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpactivatestandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
              
- name: gpinitstandby_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpinitstandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
              
- name: gp_bash_functions.sh_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gp_bash_functions.sh_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gp_bash_functions.sh --tags=~concourse_cluster,demo_cluster
              
- name: gpcheckcat_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckcat_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpcheckcat_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
              
- name: gpcheckperf_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckperf_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckperf --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpcheckperf_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpcheckperf --tags=~concourse_cluster,demo_cluster
              
- name: gprecoverseg_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                number_of_nodes: 3
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gprecoverseg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
              
- name: gprecoverseg_newhost_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                number_of_nodes: 7
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - get: alpine-docker
          - task: reserve_spare_hosts
            image: alpine-docker
            config:
              platform: linux
              inputs:
                - name: cluster_env_files
              outputs:
                - name: cluster_env_files
              run:
                path: sh
                args:
                  - -exc
                  - |
                    # modify the hostfile_init used by gpinitsystem to exclude the last two hosts, so they are spares
                    cp cluster_env_files/hostfile_init cluster_env_files/hostfile_init_orig
                    head -n -2 cluster_env_files/hostfile_init_orig > cluster_env_files/hostfile_init
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_newhost_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              SUDO_ACCESS_ON_HOSTS: 1
              SUDO_MDW_USERNAME: rhel
              BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gprecoverseg_newhost_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=~concourse_cluster,demo_cluster
              
- name: gpaddmirrors_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpaddmirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpaddmirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
              
- name: gpconfig_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpconfig_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
              LC_CTYPE: en_US.UTF-8
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpconfig_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
              LC_CTYPE: en_US.UTF-8
- name: gpssh-exkeys_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpssh-exkeys_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpssh-exkeys_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
              
- name: gpstart_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstart_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpstart_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=~concourse_cluster,demo_cluster
              
- name: gpstop_rhel8
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_rhel8]
        - get: gpdb6-rhel8-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: rhel8
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: rhel8
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstop_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb6-rhel8-test
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_rhel8
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
            trigger: true
          - task: gpstop_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb6-rhel8-test
            input_mapping:
              bin_gpdb: bin_gpdb_rhel8
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
              

- name: cli_cross_subnet
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb6-centos6-test
      - get: gpdb_binary
        resource: bin_gpdb_centos6
        passed: [gate_cli_start]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: alpine-docker
      - get: terraform.d
        params:
          unpack: true
    - task: generate-ssh-keys
      image: alpine-docker
      config:
        platform: linux
        outputs:
          - name: ssh-extra-key
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client openssl
              ssh-keygen -b 4096 -t rsa -m PEM -f ssh-extra-key/key -N "" -C ""
              openssl rsa -in ssh-extra-key/key -pubout -out ssh-extra-key/key.pem
              sed -i 's/*//;s/ *$//' ssh-extra-key/key.pub
    - in_parallel:
      - do:
        - put: terraform_1
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              subnet: dynamic
              cluster_suffix: '-1'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_1
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_1
          output_mapping:
            cluster_env_files: cluster_1
      - do:
        - put: terraform_2
          params:
            <<: *ccp_default_params
            vars:
              instance_type: n1-standard-2
              subnet: toolshed
              cluster_suffix: '-2'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_2
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_2
          output_mapping:
            cluster_env_files: cluster_2
    - task: exchange_keys
      config:
        image_resource:
          type: registry-image
          source:
            repository: centos
            tag: 7
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        run:
          path: sh
          args:
            - -exc
            - |
              yum install --quiet -y openssh-clients
              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_1/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_2/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_2/.ssh/config
                  ssh $opts centos@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_2/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_2/.ssh/known_hosts
              done < cluster_1/etc_hostfile

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_2/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_1/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_1/.ssh/config
                  ssh $opts centos@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_1/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_1/.ssh/known_hosts
              done < cluster_2/etc_hostfile
    - task: combine_cluster_config_files
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        outputs:
          - name: cluster_env_files
        run:
          path: sh
          args:
            - -exc
            - |
              cp -r cluster_1/* cluster_env_files
              cp -r cluster_1/.ssh cluster_env_files
              cat cluster_2/hostfile_all >> cluster_env_files/hostfile_all
              cat cluster_2/etc_hostfile >> cluster_env_files/etc_hostfile
              cat cluster_2/hostfile_init >> cluster_env_files/hostfile_init

              cp cluster_2/.ssh/*.pem cluster_env_files/.ssh
              cat cluster_2/.ssh/known_hosts >> cluster_env_files/.ssh/known_hosts
              cat cluster_2/.ssh/config >> cluster_env_files/.ssh/config
              sed -i '/^Host mdw-1/ s/$/ mdw/' cluster_env_files/.ssh/config
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        GPINIT_STANDBY_MASTER: '-s mdw-2'
    - task: cross_subnet_tests
      file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
      image: ccp-image
      params:
        BEHAVE_FLAGS: --tags=cross_subnet
        TEST_NAME: cross_subnet
  on_success:
    <<: *ccp_destroy_two_clusters
  ensure:
    <<: *set_failed_two_clusters

- name: pg_upgrade
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [icw_gporca_centos6]
      - get: bin_gpdb_centos6
        passed: [icw_gporca_centos6]
        trigger: true
      - get: icw_planner_centos6_dump
        passed: [icw_planner_centos6]
      - get: ccp_src
      - get: terraform.d
        params:
          unpack: true
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-2
        number_of_nodes: 2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos6
    input_mapping:
      gpdb_binary: bin_gpdb_centos6
  - task: set_gpinitsystem_config
    file: gpdb_src/concourse/tasks/set_gpinitsystem_config.yml
    params:
      GPINITSYSTEM_CONFIG: gpdb_src/concourse/scripts/configurations/pg_upgrade_gpinitsystem_config
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: test_upgrade
    file: gpdb_src/concourse/tasks/test_upgrade.yml
    input_mapping:
      sqldump: icw_planner_centos6_dump
    params:
      NUMBER_OF_NODES: 2

- name: gpexpand
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
          - gpMgmt/bin/pythonSrc/ext
        passed: [icw_gporca_centos6]
      - get: gpdb_binary
        resource: bin_gpdb_centos6
        passed: [icw_gporca_centos6]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: icw_planner_centos6_dump
        passed: [icw_planner_centos6]
      - get: terraform.d
        params:
          unpack: true
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-4
        number_of_nodes: 5
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: pre_run_test_setup
    file: gpdb_src/concourse/tasks/setup_for_gpexpand_to_make_new_gpdb.yml
    image: ccp-image
    input_mapping: {sqldump: icw_planner_centos6_dump}
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
    params:
      BEHAVE_FLAGS: --tags=gpexpand
    image: ccp-image
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed


 # end CLI test_sections

## ======================================================================
##     _        _
##    / \      / \
##   / _ \    / _ \
##  / ___ \  / ___ \
## /_/   \_\/_/   \_\
## ======================================================================
- name: gate_advanced_analytics_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_centos6
        - compile_gpdb_centos7
        trigger: true
      - get: bin_gpdb_centos6
        passed:
        - compile_gpdb_centos6
      - get: bin_gpdb_centos7
        passed:
        - compile_gpdb_centos7

- name: madlib_build_gppkg
  plan:
  - in_parallel:
      steps:
      - get: madlib_src
      - get: madlib_ci
      - get: cmake_tar
      - get: pyxb
      - get: eigen
      - get: boost
      - get: gpdb_src
        passed: [gate_advanced_analytics_start]
      - get: bin_gpdb_centos6
        trigger: true
        passed: [gate_advanced_analytics_start]
      - get: bin_gpdb_centos7
        trigger: true
        passed: [gate_advanced_analytics_start]
      - get: gpdb6-centos6-build
      - get: gpdb6-centos7-build
  - in_parallel:
    - task: build_madlib_gppkg_from_source_centos6
      file: madlib_ci/concourse/tasks/madlib_build_gppkg_from_source.yml
      image: gpdb6-centos6-build
      input_mapping:
        bin_gpdb: bin_gpdb_centos6
      output_mapping:
        madlib_master_artifacts: madlib_master_artifacts_centos6
      params:
        TEST_OS: centos6
        DB_TYPE: gpdb6
        CMAKE_BUILD_TYPE: Release
    - task: build_madlib_gppkg_from_source_centos7
      file: madlib_ci/concourse/tasks/madlib_build_gppkg_from_source.yml
      image: gpdb6-centos7-build
      input_mapping:
        bin_gpdb: bin_gpdb_centos7
      output_mapping:
        madlib_master_artifacts: madlib_master_artifacts_centos7
      params:
        TEST_OS: centos7
        DB_TYPE: gpdb6
        CMAKE_BUILD_TYPE: Release
  - in_parallel:
    - put: madlib_gppkg_centos6
      params:
        file: madlib_master_artifacts_centos6/madlib-*.gppkg
    - put: madlib_gppkg_centos7
      params:
        file: madlib_master_artifacts_centos7/madlib-*.gppkg

- name: MADlib_Test_planner_centos6
  plan:
  - in_parallel:
      steps:
      - get: madlib_ci
      - get: gpdb_src
        passed: [madlib_build_gppkg]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [madlib_build_gppkg]
      - get: gpdb6-centos6-test
      - get: madlib_gppkg
        resource: madlib_gppkg_centos6
        passed: [madlib_build_gppkg]
        trigger: true
  - task: MADlib_Test_gppkg
    file: madlib_ci/concourse/tasks/madlib_test_gppkg.yml
    image: gpdb6-centos6-test
    params:
      TEST_OS: centos6
      ORCA: "off"
      DBVER: gpdb6

- name: MADlib_Test_orca_centos6
  plan:
  - in_parallel:
      steps:
      - get: madlib_ci
      - get: gpdb_src
        passed: [madlib_build_gppkg]
      - get: bin_gpdb
        resource: bin_gpdb_centos6
        passed: [madlib_build_gppkg]
      - get: gpdb6-centos6-test
      - get: madlib_gppkg
        resource: madlib_gppkg_centos6
        passed: [madlib_build_gppkg]
        trigger: true
  - task: MADlib_Test_gppkg
    file: madlib_ci/concourse/tasks/madlib_test_gppkg.yml
    image: gpdb6-centos6-test
    params:
      TEST_OS: centos6
      ORCA: "on"
      DBVER: gpdb6

- name: MADlib_Test_planner_centos7
  plan:
  - in_parallel:
      steps:
      - get: madlib_ci
      - get: gpdb_src
        passed: [madlib_build_gppkg]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [madlib_build_gppkg]
      - get: gpdb6-centos7-test
      - get: madlib_gppkg
        resource: madlib_gppkg_centos7
        passed: [madlib_build_gppkg]
        trigger: true
  - task: MADlib_Test_gppkg
    file: madlib_ci/concourse/tasks/madlib_test_gppkg.yml
    image: gpdb6-centos7-test
    params:
      TEST_OS: centos7
      ORCA: "off"
      DBVER: gpdb6

- name: MADlib_Test_orca_centos7
  plan:
  - in_parallel:
      steps:
      - get: madlib_ci
      - get: gpdb_src
        passed: [madlib_build_gppkg]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [madlib_build_gppkg]
      - get: gpdb6-centos7-test
      - get: madlib_gppkg
        resource: madlib_gppkg_centos7
        passed: [madlib_build_gppkg]
        trigger: true
  - task: MADlib_Test_gppkg
    file: madlib_ci/concourse/tasks/madlib_test_gppkg.yml
    image: gpdb6-centos7-test
    params:
      TEST_OS: centos7
      ORCA: "on"
      DBVER: gpdb6

## ======================================================================
##  ____      _
## |  _ \ ___| | ___  __ _ ___  ___
## | |_) / _ \ |/ _ \/ _` / __|/ _ \
## |  _ <  __/ |  __/ (_| \__ \  __/
## |_| \_\___|_|\___|\__,_|___/\___|
## ======================================================================

- name: gate_release_candidate_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - check_format
        - compile_gpdb_centos6
        - compile_gpdb_centos7
        - compile_gpdb_rhel8
        - compile_gpdb_photon3
        - compile_gpdb_ubuntu18.04
        - compile_gpdb_sles12
        - icw_planner_centos6
        - icw_gporca_centos6
        - icw_planner_icproxy_centos6
        - icw_gporca_icproxy_centos6
        - icw_gporca_centos7
        - icw_planner_centos7
        - icw_gporca_icproxy_centos7
        - icw_planner_icproxy_centos7
        - unit_tests_gporca_centos7
        - gpdb_pitr_centos7
        - icw_mirrorless_centos7
        - icw_gporca_rhel8
        - icw_planner_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - unit_tests_gporca_rhel8
        - icw_mirrorless_rhel8
        - icw_gporca_oracle7
        - icw_planner_oracle7
        - icw_gporca_ubuntu18.04
        - icw_planner_ubuntu18.04
        - icw_gporca_icproxy_ubuntu18.04
        - icw_planner_icproxy_ubuntu18.04
        - icw_mirrorless_ubuntu18.04
        - icw_planner_ictcp_centos6
        - icw_extensions_gpcloud_centos6
        - test_gpdb_clients_rhel8
        - test_gpdb_clients_sles12
        - resource_group_centos6
        - resource_group_centos7
        - resource_group_rhel8
        - interconnect_centos6
        - interconnect_centos7
        - interconnect_rhel8
        - gpperfmon_centos6
        - gpperfmon_centos7
        - test_gpdb_clients_windows
        - cli_cross_subnet
        - gpmovemirrors
        - gpmovemirrors_ubuntu18
        - gpmovemirrors_rhel8
        - gppkg
        - gppkg_ubuntu18
        - gppkg_rhel8
        - analyzedb
        - analyzedb_ubuntu18
        - analyzedb_rhel8
        - gpreload
        - gpreload_ubuntu18
        - gpreload_rhel8
        - gpinitsystem
        - gpinitsystem_ubuntu18
        - gpinitsystem_rhel8
        - gpstate
        - gpstate_ubuntu18
        - gpstate_rhel8
        - replication_slots
        - replication_slots_ubuntu18
        - replication_slots_rhel8
        - gpactivatestandby
        - gpactivatestandby_ubuntu18
        - gpactivatestandby_rhel8
        - gpinitstandby
        - gpinitstandby_ubuntu18
        - gpinitstandby_rhel8
        - gp_bash_functions.sh
        - gp_bash_functions.sh_ubuntu18
        - gp_bash_functions.sh_rhel8
        - gpcheckcat
        - gpcheckcat_ubuntu18
        - gpcheckcat_rhel8
        - gpcheckperf
        - gpcheckperf_ubuntu18
        - gpcheckperf_rhel8
        - gprecoverseg
        - gprecoverseg_ubuntu18
        - gprecoverseg_rhel8
        - gprecoverseg_newhost
        - gprecoverseg_newhost_ubuntu18
        - gprecoverseg_newhost_rhel8
        - gpaddmirrors
        - gpaddmirrors_ubuntu18
        - gpaddmirrors_rhel8
        - gpconfig
        - gpconfig_ubuntu18
        - gpconfig_rhel8
        - gpssh-exkeys
        - gpssh-exkeys_ubuntu18
        - gpssh-exkeys_rhel8
        - gpstart
        - gpstart_ubuntu18
        - gpstart_rhel8
        - gpstop
        - gpstop_ubuntu18
        - gpstop_rhel8
        - madlib_build_gppkg
        - MADlib_Test_orca_centos6
        - MADlib_Test_planner_centos6
        - MADlib_Test_orca_centos7
        - MADlib_Test_planner_centos7
        - pg_upgrade
        - gpexpand
        - check_centos
        - fips_centos7
      - get: bin_gpdb_centos6
        trigger: true
        passed:
        - compile_gpdb_centos6
        - icw_planner_centos6
        - icw_gporca_centos6
        - icw_planner_icproxy_centos6
        - icw_gporca_icproxy_centos6
        - icw_planner_ictcp_centos6
        - icw_extensions_gpcloud_centos6
        - resource_group_centos6
        - interconnect_centos6
        - cli_cross_subnet
        - gpmovemirrors
        - gppkg
        - analyzedb
        - gpreload
        - gpinitsystem
        - gpstate
        - replication_slots
        - gpactivatestandby
        - gpinitstandby
        - gp_bash_functions.sh
        - gpcheckcat
        - gpcheckperf
        - gprecoverseg
        - gprecoverseg_newhost
        - gpaddmirrors
        - gpconfig
        - gpssh-exkeys
        - gpstart
        - gpstop
        - MADlib_Test_orca_centos6
        - MADlib_Test_planner_centos6
        - gpexpand
        - check_centos
      - get: bin_gpdb_centos7
        trigger: true
        passed:
        - compile_gpdb_centos7
        - icw_gporca_centos7
        - icw_planner_centos7
        - icw_gporca_icproxy_centos7
        - icw_planner_icproxy_centos7
        - icw_gporca_oracle7
        - icw_planner_oracle7
        - icw_mirrorless_centos7
        - resource_group_centos7
        - interconnect_centos7
        - MADlib_Test_orca_centos7
        - MADlib_Test_planner_centos7
      - get: bin_gpdb_rhel8
        trigger: true
        passed:
        - compile_gpdb_rhel8
        - icw_gporca_rhel8
        - icw_planner_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - icw_mirrorless_rhel8
        - resource_group_rhel8
        - interconnect_rhel8
        - gpmovemirrors_rhel8
        - gppkg_rhel8
        - analyzedb_rhel8
        - gpreload_rhel8
        - gpinitsystem_rhel8
        - gpstate_rhel8
        - replication_slots_rhel8
        - gpactivatestandby_rhel8
        - gpinitstandby_rhel8
        - gp_bash_functions.sh_rhel8
        - gpcheckcat_rhel8
        - gpcheckperf_rhel8
        - gprecoverseg_rhel8
        - gprecoverseg_newhost_rhel8
        - gpaddmirrors_rhel8
        - gpconfig_rhel8
        - gpssh-exkeys_rhel8
        - gpstart_rhel8
        - gpstop_rhel8
      - get: bin_gpdb_photon3
        trigger: true
        passed:
          - compile_gpdb_photon3
      - get: bin_gpdb_clients_photon3
        trigger: true
        passed:
          - compile_gpdb_photon3
      - get: bin_gpdb_clients_centos6
        passed:
        - compile_gpdb_centos6
      - get: bin_gpdb_clients_centos7
        passed:
        - compile_gpdb_centos7
      - get: bin_gpdb_ubuntu18.04
        trigger: true
        passed:
        - compile_gpdb_ubuntu18.04
        - icw_gporca_ubuntu18.04
        - icw_planner_ubuntu18.04
        - icw_gporca_icproxy_ubuntu18.04
        - icw_planner_icproxy_ubuntu18.04
        - icw_mirrorless_ubuntu18.04
        - gpmovemirrors_ubuntu18
        - gppkg_ubuntu18
        - analyzedb_ubuntu18
        - gpreload_ubuntu18
        - gpinitsystem_ubuntu18
        - gpstate_ubuntu18
        - replication_slots_ubuntu18
        - gpactivatestandby_ubuntu18
        - gpinitstandby_ubuntu18
        - gp_bash_functions.sh_ubuntu18
        - gpcheckcat_ubuntu18
        - gpcheckperf_ubuntu18
        - gprecoverseg_ubuntu18
        - gprecoverseg_newhost_ubuntu18
        - gpaddmirrors_ubuntu18
        - gpconfig_ubuntu18
        - gpssh-exkeys_ubuntu18
        - gpstart_ubuntu18
        - gpstop_ubuntu18
      - get: bin_gpdb_clients_ubuntu18.04
        passed:
        - compile_gpdb_ubuntu18.04
      - get: bin_gpdb_clients_windows
        passed:
        - test_gpdb_clients_windows
      - get: bin_gpdb_clients_rhel8
        passed:
        - test_gpdb_clients_rhel8
      - get: bin_gpdb_clients_sles12
        passed:
        - test_gpdb_clients_sles12

- name: Publish Server Builds
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - compile_gpdb_centos6
        - compile_gpdb_centos7
        - compile_gpdb_rhel8
        - compile_gpdb_ubuntu18.04
        - compile_gpdb_photon3
        - compile_gpdb_rhel8
      - get: bin_gpdb_centos6
        passed: [compile_gpdb_centos6]
      - get: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb_ubuntu18.04
        passed: [compile_gpdb_ubuntu18.04]
      - get: bin_gpdb_photon3
        passed: [compile_gpdb_photon3]
      - get: bin_gpdb_rhel8
        passed: [compile_gpdb_rhel8]
  - task: rename server build artifacts
    file: gpdb_src/concourse/tasks/rename-server-build.yml
    params:
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
    - put: server-build-centos6
      params:
        file: output/server-build-*-rhel6*.tar.gz
    - put: server-build-centos7
      params:
        file: output/server-build-*-rhel7*.tar.gz
    - put: server-build-ubuntu18.04
      params:
        file: output/server-build-*-ubuntu18.04*.tar.gz
    - put: server-build-photon3
      params:
        file: output/server-build-*-photon3*.tar.gz
    - put: server-build-rhel8
      params:
        file: output/server-build-*-rhel8*.tar.gz

- name: Release_Candidate
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_centos6
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_centos7
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_rhel8
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_ubuntu18.04
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_photon3
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_centos6
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_centos7
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_photon3
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_ubuntu18.04
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_windows
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_rhel8
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_sles12
        trigger: true
        passed: [gate_release_candidate_start]
      - get: gpdb6-centos6-build
  - in_parallel:
      steps:
      - task: rename_rc_artifacts
        file: gpdb_src/concourse/tasks/rename_rc_artifacts.yml
        params:
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
      - task: verify_gpdb_versions
        file: gpdb_src/concourse/tasks/verify_gpdb_versions.yml
      - task: tar_git_repo
        file: gpdb_src/concourse/tasks/tar_git_repo.yml
        params:
          SERVER_SRC_RC_PREFIX: ""
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb_centos6_rc
        params:
          file: "release_candidates/server-rc-*rhel6*.tar.gz"
      - put: bin_gpdb_centos7_rc
        params:
          file: "release_candidates/server-rc-*rhel7*.tar.gz"
      - put: bin_gpdb_rhel8_rc
        params:
          file: "release_candidates/server-rc-*rhel8*.tar.gz"
      - put: bin_gpdb_photon3_rc
        params:
          file: "release_candidates/server-rc-*photon3*.tar.gz"
      - put: bin_gpdb_ubuntu18.04_rc
        params:
          file: "release_candidates/server-rc-*ubuntu18.04*.tar.gz"
      - put: bin_gpdb_clients_centos6_rc
        params:
          file: "release_candidates/clients-rc-*rhel6*.tar.gz"
      - put: bin_gpdb_clients_centos7_rc
        params:
          file: "release_candidates/clients-rc-*rhel7*.tar.gz"
      - put: bin_gpdb_clients_ubuntu18.04_rc
        params:
          file: "release_candidates/clients-rc-*ubuntu18.04*.tar.gz"
      - put: bin_gpdb_clients_windows_rc
        params:
          file: "release_candidates/clients-rc-*-windows*.msi"
      - put: bin_gpdb_clients_photon3_rc
        params:
          file: "release_candidates/clients-rc-*photon3*.tar.gz"
      - put: bin_gpdb_clients_rhel8_rc
        params:
          file: "release_candidates/clients-rc-*rhel8*.tar.gz"
      - put: bin_gpdb_clients_sles12_rc
        params:
          file: "release_candidates/clients-rc-*sles12*.tar.gz"
      - put: server_src_rc
        params:
          file: "server_tar/*server-src-rc-*.tar.gz"

- name: Build_Release_Candidate_RPMs
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_centos6
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_centos7
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_rhel8
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_photon3
        trigger: true
        passed: [gate_release_candidate_start]
      - get: gpdb6-centos6-build
      - get: gpdb6-centos7-build
      - get: gpdb6-rhel8-build
      - get: gpdb6-photon3-build
      - get: greenplum-database-release
      - get: license_file
  - task: create_gpdb_rpm_package_centos6
    file: greenplum-database-release/ci/concourse/tasks/build-gpdb-rpm.yml
    image: gpdb6-centos6-build
    input_mapping:
      bin_gpdb: bin_gpdb_centos6
    output_mapping:
      gpdb_rpm_installer: gpdb_rpm_centos6
    params:
      PLATFORM: "rhel6"
      GPDB_NAME: greenplum-db-6
      GPDB_RELEASE: 1
      GPDB_LICENSE: Pivotal Software EULA
      GPDB_URL: https://github.com/greenplum-db/gpdb
      GPDB_OSS: false
  - task: create_gpdb_rpm_package_centos7
    file: greenplum-database-release/ci/concourse/tasks/build-gpdb-rpm.yml
    image: gpdb6-centos7-build
    input_mapping:
      bin_gpdb: bin_gpdb_centos7
    output_mapping:
      gpdb_rpm_installer: gpdb_rpm_centos7
    params:
      PLATFORM: "rhel7"
      GPDB_NAME: greenplum-db-6
      GPDB_RELEASE: 1
      GPDB_LICENSE: Pivotal Software EULA
      GPDB_URL: https://github.com/greenplum-db/gpdb
      GPDB_OSS: false
  - task: create_gpdb_rpm_package_rhel8
    file: greenplum-database-release/ci/concourse/tasks/build-gpdb-rpm.yml
    image: gpdb6-rhel8-build
    input_mapping:
      bin_gpdb: bin_gpdb_rhel8
    output_mapping:
      gpdb_rpm_installer: gpdb_rpm_rhel8
    params:
      PLATFORM: "rhel8"
      GPDB_NAME: greenplum-db-6
      GPDB_RELEASE: 1
      GPDB_LICENSE: Pivotal Software EULA
      GPDB_URL: https://github.com/greenplum-db/gpdb
      GPDB_OSS: false
  - task: create_gpdb_rpm_package_photon3
    file: greenplum-database-release/ci/concourse/tasks/build-gpdb-rpm.yml
    image: gpdb6-photon3-build
    input_mapping:
      bin_gpdb: bin_gpdb_photon3
    output_mapping:
      gpdb_rpm_installer: gpdb_rpm_photon3
    params:
      PLATFORM: "photon3"
      GPDB_NAME: greenplum-db-6
      GPDB_RELEASE: 1
      GPDB_LICENSE: Pivotal Software EULA
      GPDB_URL: https://github.com/greenplum-db/gpdb
      GPDB_OSS: false
  - task: rename_rc_artifacts
    image: gpdb6-centos6-build
    config:
      platform: linux
      inputs:
        - name: gpdb_src
        - name: gpdb_rpm_centos6
        - name: gpdb_rpm_centos7
        - name: gpdb_rpm_rhel8
        - name: gpdb_rpm_photon3
      outputs:
        - name: renamed_gpdb_rpm_centos6
        - name: renamed_gpdb_rpm_centos7
        - name: renamed_gpdb_rpm_rhel8
        - name: renamed_gpdb_rpm_photon3
      params:
        RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
      run:
        path: sh
        args:
          - -exc
          - |
            gpdb_semver=$(gpdb_src/getversion | cut -d' ' -f1)
            cp -v gpdb_rpm_centos6/*.rpm renamed_gpdb_rpm_centos6/greenplum-db-${gpdb_semver}-rhel6-x86_64${RC_BUILD_TYPE_GCS}.rpm
            cp -v gpdb_rpm_centos7/*.rpm renamed_gpdb_rpm_centos7/greenplum-db-${gpdb_semver}-rhel7-x86_64${RC_BUILD_TYPE_GCS}.rpm
            cp -v gpdb_rpm_rhel8/*.rpm renamed_gpdb_rpm_rhel8/greenplum-db-${gpdb_semver}-rhel8-x86_64${RC_BUILD_TYPE_GCS}.rpm
            cp -v gpdb_rpm_photon3/*.rpm renamed_gpdb_rpm_photon3/greenplum-db-${gpdb_semver}-photon3-x86_64${RC_BUILD_TYPE_GCS}.rpm
  - in_parallel:
      steps:
      - put: gpdb_rpm_installer_centos6
        params:
          file: renamed_gpdb_rpm_centos6/*.rpm
      - put: gpdb_rpm_installer_centos7
        params:
          file: renamed_gpdb_rpm_centos7/*.rpm
      - put: gpdb_rpm_installer_rhel8
        params:
          file: renamed_gpdb_rpm_rhel8/*.rpm
      - put: gpdb_rpm_installer_photon3
        params:
          file: renamed_gpdb_rpm_photon3/*.rpm


## ======================================================================
##    __      _                 _
##   /__\_  _| |_ ___ _ __  ___(_) ___  _ __  ___
##  /_\ \ \/ / __/ _ \ '_ \/ __| |/ _ \| '_ \/ __|
## //__  >  <| ||  __/ | | \__ \ | (_) | | | \__ \
## \__/ /_/\_\\__\___|_| |_|___/_|\___/|_| |_|___/
## ======================================================================

- name: icw_extensions_gpcloud_centos6
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos6]
        trigger: true
      - get: bin_gpdb_centos6
        passed: [compile_gpdb_centos6]
      - get: gpdb6-centos6-test
  - in_parallel:
      steps:
      - task: unit_tests_gpcloud
        file: gpdb_src/concourse/tasks/unit_tests_gpcloud.yml
        image: gpdb6-centos6-test
        params:
          TARGET_OS: centos
      - task: regression_tests_gpcloud_centos
        input_mapping:
          bin_gpdb: bin_gpdb_centos6
        file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
        image: gpdb6-centos6-test
        params:
          gpcloud_access_key_id: ((gpcloud-access-key-id))
          gpcloud_secret_access_key: ((gpcloud-secret-access-key))
          TARGET_OS: centos
      - task: gpcheckcloud_tests_gpcloud_centos
        input_mapping:
          bin_gpdb: bin_gpdb_centos6
        file: gpdb_src/concourse/tasks/gpcheckcloud_tests_gpcloud.yml
        image: gpdb6-centos6-test
        params:
          gpcloud_access_key_id: ((gpcloud-access-key-id))
          gpcloud_secret_access_key: ((gpcloud-secret-access-key))
          TARGET_OS: centos
